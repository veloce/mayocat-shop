group ProductDAO;

createProduct() ::= <<
    INSERT INTO product (entity_id, position, title, model, on_shelf, description, price, weight, stock, featured_image_id)
    VALUES (:product.id,
            :position,
            :product.title,
            :product.model,
            :product.onShelf,
            :product.description,
            :product.price,
            :product.weight,
            :product.stock,
            :product.featuredImageId)
>>

updateProduct() ::= <<
    UPDATE product
    SET    title = :product.title,
           model = :product.model,
           description = :product.description,
           on_shelf = :product.onShelf,
           price = :product.price,
           weight = :product.weight,
           stock = :product.stock,
           featured_image_id = :product.featuredImageId
    WHERE  entity_id = :product.id
>>

lastPosition() ::= <<
    SELECT product.position
    FROM   entity
           INNER JOIN product
                   ON entity.id = product.entity_id
    WHERE  entity.type = 'product'
           AND entity.tenant_id = :tenant.id
    ORDER  BY position DESC
    LIMIT  1
>>

findOrphanProducts() ::= <<
    SELECT entity.*, product.*, localization_data(entity_id)
    FROM   entity
           INNER JOIN product
                   ON product.entity_id = entity.id
    WHERE  NOT EXISTS (SELECT product_id
                       FROM   collection_product
                       WHERE  product_id = entity.id)
           AND entity.tenant_id = :tenant.id
    ORDER  BY product.position ASC
>>

findAllForCollection() ::= <<
    SELECT entity.*, product.*, localization_data(entity_id)
    FROM   collection_product
           INNER JOIN entity
                   ON entity.id = collection_product.product_id
           INNER JOIN product
                   ON product.entity_id = collection_product.product_id
    WHERE  collection_product.collection_id = :collection.id
    ORDER  BY collection_product.position
>>

findAllOnShelf() ::= <<
    SELECT entity.*, product.*, localization_data(entity_id)
    FROM   entity
           INNER JOIN product
                   ON entity.id = product.entity_id
    WHERE  entity.type = 'product'
           AND entity.tenant_id = :tenant.id
           AND product.on_shelf = true
    ORDER  BY product.position ASC
    LIMIT  :number
    OFFSET :offset
>>

deleteProductFromCollections() ::= <<
    DELETE
    FROM   collection_product
    WHERE  collection_product.product_id = :id
>>
